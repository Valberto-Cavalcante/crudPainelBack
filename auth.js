// Este arquivo √© respons√°vel pela configura√ß√£o da autentica√ß√£o baseada em JWT para a aplica√ß√£o.
// Utiliza o Passport.js com a estrat√©gia JWT para proteger rotas e validar tokens de acesso.
// Permite a extra√ß√£o do token tanto do header Authorization (Bearer) quanto de cookies.
// Define as op√ß√µes da estrat√©gia JWT, incluindo a chave secreta e m√©todos de extra√ß√£o do token.
// Ao autenticar, busca o usu√°rio no banco de dados pelo id presente no payload do token e verifica se est√° ativo.
// Caso o usu√°rio seja encontrado e esteja ativo, a autentica√ß√£o √© considerada v√°lida.
// Exporta o Passport, a estrat√©gia JWT, o pr√≥prio JWT e as op√ß√µes configuradas para uso em outras partes do sistema.
// Este arquivo centraliza toda a l√≥gica de autentica√ß√£o e valida√ß√£o de usu√°rios via token JWT.
// A vari√°vel de ambiente JWT_SECRET √© obrigat√≥ria para seguran√ßa.

var passport = require('passport');
var jwt = require('jsonwebtoken');
var passportJWT = require('passport-jwt');
var ExtractJwt = passportJWT.ExtractJwt;
var JwtStrategy = passportJWT.Strategy;

// Verificar se JWT_SECRET est√° definido
if (!process.env.JWT_SECRET) {
    throw new Error('JWT_SECRET √© uma variavel essencial. Inclua ela no .env');
}

// Configura√ß√£o da estrat√©gia JWT
var jwtOptions = {
    jwtFromRequest: ExtractJwt.fromExtractors([
        ExtractJwt.fromAuthHeaderAsBearerToken(),
        (req) => {
            if (req.cookies && req.cookies.token) {
                return req.cookies.token;
            }
            return null;
        }
    ]),
    secretOrKey: process.env.JWT_SECRET
};

var jwtStrategy = new JwtStrategy(jwtOptions, async (payload, done) => {
    try {
        console.log('üîç JWT Strategy - Payload recebido:', payload);
        
        // Busca o usu√°rio pelo id do payload e traz ele completo
        const db = require('./db');
        const user = await db.findOne("usuarios", { id: payload.id, ativo: true });
        
        if (user) {
            console.log('‚úÖ JWT Strategy - Usu√°rio encontrado:', { id: user.id, userName: user.userName });
            return done(null, user);
        } else {
            console.log('‚ùå JWT Strategy - Usu√°rio n√£o encontrado ou inativo');
            return done(null, false);
        }
    } catch (err) {
        console.error('‚ùå JWT Strategy - Erro ao buscar usu√°rio:', err);
        return done(err, false);
    }
});

passport.use(jwtStrategy);

module.exports = {
    passport: passport,
    jwtStrategy: jwtStrategy,
    jwt: jwt,
    jwtOptions: jwtOptions
};
