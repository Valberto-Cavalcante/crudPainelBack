#!/usr/bin/env node
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-mongodb:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '50010');
app.set('port', port);

/**
 * Create server based on environment.
 */

var server;
var isProduction = process.env.STATUS_PROJETO === 'production';

if (isProduction) {
    // HTTPS para produÃ§Ã£o
    try {
        const privateKey = fs.readFileSync(process.env.SSL_KEY_PATH || '/etc/ssl/private/server.key', 'utf8');
        const certificate = fs.readFileSync(process.env.SSL_CERT_PATH || '/etc/ssl/certs/server.crt', 'utf8');
        
        const credentials = {
            key: privateKey,
            cert: certificate
        };
        
        server = https.createServer(credentials, app);
     } catch (error) {
        server = http.createServer(app);
    }
} else {
    // HTTP para desenvolvimento
    server = http.createServer(app);
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var protocol = isProduction && server instanceof https.Server ? 'HTTPS' : 'HTTP';
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug(`${protocol} server listening on ${bind}`);
    console.log(`ðŸš€ ${protocol} server running on ${protocol.toLowerCase()}://localhost:${addr.port}`);
}
